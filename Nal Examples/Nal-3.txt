------------------------- Compound composition, two premises -------------------------------------

//Swan is a type of swimmer.

<swan --> swimmer>. %0.90%

//Swan is a type of bird.

<swan --> bird>. %0.80%

16

//Swan is a type of bird or a type of swimmer.

//outputMustContain('<swan --> (|,bird,swimmer)>. %0.98;0.81%')

//Swan is a type of swimming bird. 

//outputMustContain('<swan --> (&,bird,swimmer)>. %0.72;0.81%')

----------------------------- Compound composition, two premises ---------------------------------

//Sport is a type of competition. 

<sport --> competition>. %0.90%

//Chess is a type of competition.

<chess --> competition>. %0.80% 

16

//If something is either chess or sport, then it is a competition.

//outputMustContain('<(|,chess,sport) --> competition>. %0.72;0.81%')

//If something is both chess and sport, then it is a competition.

//outputMustContain('<(&,chess,sport) --> competition>. %0.98;0.81%')

------------------------------ Compound decomposition, two premises ----------------------------

//Robin is a type of bird or a type of swimmer. 

<robin --> (|,bird,swimmer)>.

//Robin is not a type of swimmer. 

<robin --> swimmer>. %0.00%

32

//Robin is a type of bird.

//outputMustContain('<robin --> bird>. %1.00;0.81%')

------------------------------- Compound decomposition, two premises -----------------------------

//Robin is not a type of swimmer.

<robin --> swimmer>. %0.00%

//Robin is not a nonswimming mammal.

<robin --> (-,mammal,swimmer)>. %0.00% 

32

//Robin is not a type of mammal.

//outputMustContain('<robin --> mammal>. %0.00;0.81%')

------------------------------------------- Set operations -----------------------------------

//PlanetX is Mars, Pluto, or Venus.

<planetX --> {Mars,Pluto,Venus}>. %0.90% 

//PlanetX is probably Pluto or Saturn.

<planetX --> {Pluto,Saturn}>. %0.70%

32

//PlanetX is Mars, Pluto, Saturn, or Venus.

//outputMustContain('<planetX --> {Mars,Pluto,Saturn,Venus}>. %0.97;0.81%')

//PlanetX is probably Pluto.

//outputMustContain('<planetX --> {Pluto}>. %0.63;0.81%')

------------------------------------------- Set operations -----------------------------------------------

//PlanetX is Mars, Pluto, or Venus.

<planetX --> {Mars,Pluto,Venus}>. %0.90% 

//PlanetX is probably neither Pluto nor Saturn.

<planetX --> {Pluto,Saturn}>. %0.10%

32

//PlanetX is Mars, Pluto, Saturn, or Venus.

//outputMustContain('<planetX --> {Mars,Pluto,Saturn,Venus}>. %0.91;0.81%')

//PlanetX is either Mars or Venus.

//outputMustContain('<planetX --> {Mars,Venus}>. %0.81;0.81%')

--------------------------------- Composition on both sides of a statement ---------------------------

//Bird is a type of animal. 

<bird --> animal>. %0.90% 

//Is a swimming bird a type of swimming animal?

<(&,bird,swimmer) --> (&,animal,swimmer)>?

32

//A swimming bird is probably a type of swimming animal.

//outputMustContain('<(&,bird,swimmer) --> (&,animal,swimmer)>. %0.90;0.73%')

----------------------------- Composition on both sides of a statement ------------------------

//Bird is a type of animal.

<bird --> animal>. %0.90%

//Is a nonanimal swimmer a type of a nonbird swimmer?

<(-,swimmer,animal) --> (-,swimmer,bird)>?   

32

//A nonanimal swimmer is probably a type of nonbird swimmer.

//outputMustContain('<(-,swimmer,animal) --> (-,swimmer,bird)>. %0.90;0.73%')

----------------------------- Compound composition, one premise -----------------------------

//Swan is a type of bird. 

<swan --> bird>. %0.90%

//Is a swan a type of bird or swimmer?

<swan --> (|,bird,swimmer)>?

32

//A swan is probably a type of bird or swimmer.

//outputMustContain('<swan --> (|,bird,swimmer)>. %0.90;0.73%')

------------------- Compound composition, one premise -----------------

//Swan is a type of bird. 

<swan --> bird>. %0.90% 

//Is swimming swan a type of bird?

<(&,swan,swimmer) --> bird>?

32

//Swimming swan is a type of bird.

//outputMustContain('<(&,swan,swimmer) --> bird>. %0.90;0.73%')

------------------- Compound composition, one premise -----------------

//Swan is a type of bird.

<swan --> bird>. %0.90%

//Is swan a type of nonbird swimmer?

<swan --> (-,swimmer,bird)>?

32

//A swan is not a type of nonbird swimmer.

//outputMustContain('<swan --> (-,swimmer,bird)>. %0.10;0.73%')

------------------- Compound composition, one premise -----------------

//Swan is a type of bird.

<swan --> bird>. %0.90%

//Is being bird what differ swimmer from swan?

<(~,swimmer, swan) --> bird>? 

32

//What differs swimmer from swan is not being bird.

//outputMustContain('<(~,swimmer,swan) --> bird>. %0.10;0.73%')

------------------- Compound composition, one premise -----------------

//Swan is a type of bird. 

<swan --> bird>. %0.90%

//Is being bird what differ swimmer from swan?

<(~,swimmer, swan) --> bird>? 

32

//What differs swimmer from swan is not being bird.

//outputMustContain('<(~,swimmer,swan) --> bird>. %0.10;0.73%')

------------------- Compound decomposition, one premise -----------------

//Robin is a type of swimming bird.

<robin --> (&,bird,swimmer)>. %0.90% 

32

//Robin is a type of bird.

//outputMustContain('<robin --> bird>. %0.90;0.73%')

------------------- Compound decomposition, one premise -----------------

//Robin is a type of nonswimming bird.

<robin --> (-,bird,swimmer)>. %0.90%

32

//Robin is a type of bird.

//outputMustContain('<robin --> bird>. %0.90;0.73%')

------------------- Compound decomposition, one premise -----------------

//Boys and girls are youth.

<(|, boy, girl) --> youth>. %0.90%

32

//Boys are youth.

//outputMustContain('<boy --> youth>. %0.90;0.73%')

------------------- Compound decomposition, one premise -----------------

//What differs boys from gials are being strong.

<(~, boy, girl) --> [strong]>. %0.90%

32

//Boys are strong.

//outputMustContain('<boy --> [strong]>. %0.90;0.73%')